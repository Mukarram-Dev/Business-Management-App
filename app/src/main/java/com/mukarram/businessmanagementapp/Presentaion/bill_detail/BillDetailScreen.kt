package com.mukarram.businessmanagementapp.Presentaion

import CustomTypography
import LightColors
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import com.mukarram.businessmanagementapp.CustomAppWidgets.AppCustomButton
import com.mukarram.businessmanagementapp.CustomAppWidgets.CustomAppBar
import com.mukarram.businessmanagementapp.DatabaseApp.DataClasses.Product
import com.mukarram.businessmanagementapp.DatabaseApp.DataClasses.ProductEntry
import com.mukarram.businessmanagementapp.Presentaion.bill_detail.BillDetailViewModel
import com.mukarram.businessmanagementapp.Presentaion.bill_detail.GetBillDetails
import com.mukarram.businessmanagementapp.Presentaion.bill_detail.utils.SharePdfFile
import com.mukarram.businessmanagementapp.Presentaion.product_stock.StockViewModel


@Composable
fun BillDetailScreen(
    navController: NavHostController,
    billId: Long,
    viewModel: BillDetailViewModel = hiltViewModel(),


    ) {


    val billDetailsState by viewModel.billDetailsState.collectAsState()
    // Fetch bill details using LaunchedEffect and the bill ID
    LaunchedEffect(billId) {

        viewModel.getBillDetailsById(billId)
    }

    // Fetch bill details using LaunchedEffect and the bill ID





    // State to track if the PDF is generated successfully
    var isPdfGenerated by remember { mutableStateOf(false) }

    // Function to handle the "Download" button click
    val onDownloadClicked: () -> Unit = {
        val generatedFile = viewModel.generateAndSavePDF(billDetailsState!!) { success ->
            isPdfGenerated = success
        }
    }







    Scaffold(
        topBar = { CustomAppBar("Bill Detail",navController)  },

        modifier = Modifier
            .background(color = LightColors.background),
        content = {
            it
            Box(
                modifier = Modifier
                    .fillMaxSize()

            ) {
                Column(
                    modifier = Modifier
                        .align(Alignment.TopCenter)
                        .padding(horizontal = 10.dp, vertical = 24.dp)
                ) {
                    BillDetailHeader(billDetailsState)



                    Spacer(modifier = Modifier.height(16.dp))

                    BillTable(billDetailsState,viewModel)
                }

                Box(
                    modifier = Modifier.align(Alignment.BottomCenter)
                ) {
                    BottomBar(billDetailsState,viewModel)
                }
            }

        }
    )
}

@Composable
fun BottomBar(
    billDetailsState: GetBillDetails?,
    viewModel: BillDetailViewModel
) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(color = Color.White)
    ) {

        var isPdfGenerated by remember { mutableStateOf(false) }

        Row(
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
        ) {

            AppCustomButton(btnText = "Download", modifier = Modifier.fillMaxWidth(0.5f)) {
                viewModel.generateAndSavePDF(billDetailsState!!) { success ->
                    isPdfGenerated = success
                }
            }

            if (isPdfGenerated) {
                SharePdfFile(viewModel.generatedPdfFile.value)
            }
        }

        // Display the toast based on the result
        if (isPdfGenerated) {
            Toast.makeText(
                LocalContext.current,
                "PDF downloaded successfully",
                Toast.LENGTH_SHORT
            ).show()
        }
    }
}



@Composable
fun BillTable(bill: GetBillDetails?, viewModel: BillDetailViewModel) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = "Product",
            style = CustomTypography.subtitle2.copy(color = Color.Black),
            modifier = Modifier.weight(1f)
        )

        Text(
            text = "Qty",
            style = CustomTypography.subtitle2.copy(color = Color.Black),
            modifier = Modifier.width(100.dp)
        )

        Text(
            text = "Price",
            style = CustomTypography.subtitle2.copy(color = Color.Black),
            modifier = Modifier.width(80.dp)
        )

        Text(
            text = "Amount",
            style = CustomTypography.subtitle2.copy(color = Color.Black),
            modifier = Modifier.width(70.dp)
        )
    }
    Divider(thickness = 2.dp)



    Spacer(modifier = Modifier.height(5.dp))


    // Check if the data is available
    bill?.let { billDetails ->
        Column(
            modifier = Modifier
                .fillMaxWidth(),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Display customer details and other bill-related information here

            // Display the list of product entries using the BillItem composable
            BillItem(billDetails.productEntries,billDetails.products)
        }
    }


    Spacer(modifier = Modifier.height(16.dp))


    Row(
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(
            text = "Total Amount: ",
            style = CustomTypography.h2.copy(color = LightColors.onSecondary),

            )
        Text(
            text = "Rs. ${bill?.totalBill}",
            style = CustomTypography.h2.copy(color = LightColors.onSecondary),
            modifier = Modifier.padding(end = 20.dp)

            )
    }
}

@Composable
fun BillDetailHeader(bill: GetBillDetails?) {


    Column(horizontalAlignment = Alignment.Start) {


        Text(
            text = "Customer Name: ${bill?.customerName}",
            style = CustomTypography.h2.copy(color = LightColors.onSecondary),
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Text(
            text = "Customer Phone: ${bill?.customerPhone}",
            style = CustomTypography.subtitle1.copy(color = LightColors.onSecondary),
            modifier = Modifier.padding(bottom = 16.dp)
        )

        Text(
            text = "Customer Address: ${bill?.customerAdress}",
            style = CustomTypography.h2.copy(color = LightColors.onSecondary),
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Text(
            text = "Purchase Date: ${bill?.purchaseDate}",
            style = CustomTypography.subtitle1.copy(color = LightColors.onSecondary),
            modifier = Modifier.padding(bottom = 16.dp)
        )


    }


}

@Composable
fun BillItem(productEntries: List<ProductEntry>, products: List<Product?>) {


    LazyColumn {
        itemsIndexed(productEntries) {index, productEntry ->



            val toatalBill=productEntry.saleQuantity.times(productEntry.salePrice)


            Row(
                modifier = Modifier.fillMaxWidth(),

            ) {
                products[index]?.name?.let {
                    Text(
                        text = it,
                        style = CustomTypography.subtitle1.copy(color = LightColors.onSecondary),
                        modifier = Modifier.weight(1f)
                    )
                }

                Text(
                    text = "${productEntry.saleQuantity}",
                    style = CustomTypography.subtitle2.copy(color = LightColors.onSecondary),
                    modifier = Modifier.width(100.dp)
                )

                Text(
                    text = "${productEntry.salePrice}",
                    style = CustomTypography.subtitle2.copy(color = LightColors.onSecondary),
                    modifier = Modifier.width(90.dp)
                )

                Text(
                    text = toatalBill.toString(),
                    style = CustomTypography.subtitle2.copy(color = LightColors.onSecondary),
                    modifier = Modifier.width(60.dp)
                )
            }

            Spacer(modifier = Modifier.height(10.dp))
            Divider()
        }
    }
}





